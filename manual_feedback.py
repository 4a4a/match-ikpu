import pandas as pd
from tqdm import tqdm
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity

from utils import preprocess_text, load_ikpu_data, build_ikpu_text

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
feedback_path = "data/feedback.xlsx"
ikpu_path = "data/ikpu_codes.xlsx"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
feedback = pd.read_excel(feedback_path)
ikpu = load_ikpu_data(ikpu_path)

feedback.columns = feedback.columns.str.strip()
ikpu.columns = ikpu.columns.str.strip()

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
feedback['query'] = (
    feedback['–ù–∞–∑–≤–∞–Ω–∏–µ'].fillna('') + ' ' +
    feedback['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].fillna('') + ' ' +
    feedback['brand'].fillna('')
).apply(preprocess_text)

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –ò–ö–ü–£
ikpu['text'] = build_ikpu_text(ikpu)
ikpu_dict = ikpu.set_index("–ò–ö–ü–£")["text"].to_dict()

# –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
model = SentenceTransformer('paraphrase-multilingual-MiniLM-L12-v2')

scores = []
for _, row in tqdm(feedback.iterrows(), total=len(feedback), desc="üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ"):
    ikpu_text = ikpu_dict.get(row['–ò–ö–ü–£'])
    if not ikpu_text:
        scores.append(None)
        continue
    try:
        query_vec = model.encode(row['query'], convert_to_tensor=False)
        ikpu_vec = model.encode(ikpu_text, convert_to_tensor=False)
        score = cosine_similarity([query_vec], [ikpu_vec])[0][0]
        scores.append(round(float(score), 4))
    except (ValueError, RuntimeError):
        scores.append(None)

feedback['–ü–æ—Ö–æ–∂–µ—Å—Ç—å'] = scores

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
feedback.to_excel(feedback_path, index=False)
print("‚úÖ –§–∞–π–ª feedback.xlsx –æ–±–Ω–æ–≤–ª—ë–Ω —Å –∫–æ–ª–æ–Ω–∫–æ–π '–ü–æ—Ö–æ–∂–µ—Å—Ç—å'")
