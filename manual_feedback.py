import pandas as pd
import numpy as np
import hashlib
from sentence_transformers import SentenceTransformer
from utils import (
    preprocess_text, load_ikpu_data, build_ikpu_text,
    save_embeddings, build_checksum, validate_cache
)

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ===
IKPU_PATH = "data/ikpu_codes.xlsx"
FEEDBACK_PATH = "data/feedback.xlsx"
FEEDBACK_EMBED_FILE = "data/ikpu_feedback_embeddings.npz"
FEEDBACK_CHECKSUM_FILE = "data/ikpu_feedback_checksums.csv"
BATCH_SIZE = 64

# === –ó–∞–≥—Ä—É–∑–∫–∞ ===
print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
ikpu = load_ikpu_data(IKPU_PATH)
ikpu.columns = ikpu.columns.str.strip()

try:
    feedback = pd.read_excel(FEEDBACK_PATH)
    feedback.columns = feedback.columns.str.strip()
except FileNotFoundError:
    print("‚ùå –§–∞–π–ª feedback.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    exit(1)

# === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –ò–ö–ü–£ ===
ikpu["brand"] = ikpu.get("brand", ikpu.iloc[:, 4])
ikpu["–ì—Ä—É–ø–ø–∞"] = ikpu["–ö–ª–∞—Å—Å"]
ikpu_dict = ikpu.set_index("–ò–ö–ü–£")["–ù–∞–∑–≤–∞–Ω–∏–µ –ò–ö–ü–£"].astype(str).to_dict()
ikpu_class_dict = ikpu.set_index("–ò–ö–ü–£")["–ö–ª–∞—Å—Å"]

# === –û–±–æ–≥–∞—â–µ–Ω–∏–µ feedback ===
feedback["–ù–∞–∑–≤–∞–Ω–∏–µ –ò–ö–ü–£"] = feedback["–ò–ö–ü–£"].map(ikpu_dict)
feedback["text"] = feedback["–ù–∞–∑–≤–∞–Ω–∏–µ –ò–ö–ü–£"].fillna("").apply(preprocess_text)
feedback["–ì—Ä—É–ø–ø–∞"] = feedback["–ò–ö–ü–£"].map(ikpu_class_dict)
feedback_checksums = build_checksum(feedback)

# === –ú–æ–¥–µ–ª—å ===
print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å...")
model = SentenceTransformer("paraphrase-multilingual-MiniLM-L12-v2")

# === –ö–µ—à ===
if validate_cache(FEEDBACK_CHECKSUM_FILE, feedback_checksums):
    print("‚úÖ –ö–µ—à feedback –≤–∞–ª–∏–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—á—ë—Ç")
else:
    print("‚ö†Ô∏è –ö–µ—à feedback —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º")
    vectors = model.encode(
        feedback["text"].tolist(),
        batch_size=BATCH_SIZE,
        convert_to_tensor=False,
        show_progress_bar=True
    )
    save_embeddings(
        FEEDBACK_EMBED_FILE,
        feedback["text"].tolist(),
        np.array(vectors),
        feedback["–ò–ö–ü–£"].astype(str).tolist(),
        feedback["–ù–∞–∑–≤–∞–Ω–∏–µ –ò–ö–ü–£"].tolist(),
        feedback_checksums
    )
    print("‚úÖ –í–µ–∫—Ç–æ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
